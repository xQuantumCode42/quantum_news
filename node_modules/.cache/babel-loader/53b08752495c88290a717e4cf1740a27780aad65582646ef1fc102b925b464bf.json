{"ast":null,"code":"require(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.for-each.js\");\nconst utils = module.exports = {};\nconst entities = require('entities');\nconst xml2js = require('xml2js');\nutils.stripHtml = function (str) {\n  str = str.replace(/([^\\n])<\\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\\n)*?>([^\\n])/gm, '$1\\n$3');\n  str = str.replace(/<(?:.|\\n)*?>/gm, '');\n  return str;\n};\nutils.getSnippet = function (str) {\n  return entities.decodeHTML(utils.stripHtml(str)).trim();\n};\nutils.getLink = function (links, rel, fallbackIdx) {\n  if (!links) return;\n  for (let i = 0; i < links.length; ++i) {\n    if (links[i].$.rel === rel) return links[i].$.href;\n  }\n  if (links[fallbackIdx]) return links[fallbackIdx].$.href;\n};\nutils.getContent = function (content) {\n  if (typeof content._ === 'string') {\n    return content._;\n  } else if (typeof content === 'object') {\n    let builder = new xml2js.Builder({\n      headless: true,\n      explicitRoot: true,\n      rootName: 'div',\n      renderOpts: {\n        pretty: false\n      }\n    });\n    return builder.buildObject(content);\n  } else {\n    return content;\n  }\n};\nutils.copyFromXML = function (xml, dest, fields) {\n  fields.forEach(function (f) {\n    let from = f;\n    let to = f;\n    let options = {};\n    if (Array.isArray(f)) {\n      from = f[0];\n      to = f[1];\n      if (f.length > 2) {\n        options = f[2];\n      }\n    }\n    const {\n      keepArray,\n      includeSnippet\n    } = options;\n    if (xml[from] !== undefined) {\n      dest[to] = keepArray ? xml[from] : xml[from][0];\n    }\n    if (dest[to] && typeof dest[to]._ === 'string') {\n      dest[to] = dest[to]._;\n    }\n    if (includeSnippet && dest[to] && typeof dest[to] === 'string') {\n      dest[to + 'Snippet'] = utils.getSnippet(dest[to]);\n    }\n  });\n};\nutils.maybePromisify = function (callback, promise) {\n  if (!callback) return promise;\n  return promise.then(data => setTimeout(() => callback(null, data)), err => setTimeout(() => callback(err)));\n};\nconst DEFAULT_ENCODING = 'utf8';\nconst ENCODING_REGEX = /(encoding|charset)\\s*=\\s*(\\S+)/;\nconst SUPPORTED_ENCODINGS = ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'latin1', 'binary', 'hex'];\nconst ENCODING_ALIASES = {\n  'utf-8': 'utf8',\n  'iso-8859-1': 'latin1'\n};\nutils.getEncodingFromContentType = function (contentType) {\n  contentType = contentType || '';\n  let match = contentType.match(ENCODING_REGEX);\n  let encoding = (match || [])[2] || '';\n  encoding = encoding.toLowerCase();\n  encoding = ENCODING_ALIASES[encoding] || encoding;\n  if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {\n    encoding = DEFAULT_ENCODING;\n  }\n  return encoding;\n};","map":{"version":3,"names":["utils","module","exports","entities","require","xml2js","stripHtml","str","replace","getSnippet","decodeHTML","trim","getLink","links","rel","fallbackIdx","i","length","$","href","getContent","content","_","builder","Builder","headless","explicitRoot","rootName","renderOpts","pretty","buildObject","copyFromXML","xml","dest","fields","forEach","f","from","to","options","Array","isArray","keepArray","includeSnippet","undefined","maybePromisify","callback","promise","then","data","setTimeout","err","DEFAULT_ENCODING","ENCODING_REGEX","SUPPORTED_ENCODINGS","ENCODING_ALIASES","getEncodingFromContentType","contentType","match","encoding","toLowerCase","indexOf"],"sources":["/home/bing/Git/quantum_news/node_modules/rss-parser/lib/utils.js"],"sourcesContent":["const utils = module.exports = {};\nconst entities = require('entities');\nconst xml2js = require('xml2js');\n\nutils.stripHtml = function(str) {\n  str = str.replace(/([^\\n])<\\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\\n)*?>([^\\n])/gm, '$1\\n$3')\n  str = str.replace(/<(?:.|\\n)*?>/gm, '');\n  return str;\n}\n\nutils.getSnippet = function(str) {\n  return entities.decodeHTML(utils.stripHtml(str)).trim();\n}\n\nutils.getLink = function(links, rel, fallbackIdx) {\n  if (!links) return;\n  for (let i = 0; i < links.length; ++i) {\n    if (links[i].$.rel === rel) return links[i].$.href;\n  }\n  if (links[fallbackIdx]) return links[fallbackIdx].$.href;\n}\n\nutils.getContent = function(content) {\n  if (typeof content._ === 'string') {\n    return content._;\n  } else if (typeof content === 'object') {\n    let builder = new xml2js.Builder({headless: true, explicitRoot: true, rootName: 'div', renderOpts: {pretty: false}});\n    return builder.buildObject(content);\n  } else {\n    return content;\n  }\n}\n\nutils.copyFromXML = function(xml, dest, fields) {\n  fields.forEach(function(f) {\n    let from = f;\n    let to = f;\n    let options = {};\n    if (Array.isArray(f)) {\n      from = f[0];\n      to = f[1];\n      if (f.length > 2) {\n        options = f[2];\n      }\n    }\n    const { keepArray, includeSnippet } = options;\n    if (xml[from] !== undefined){\n      dest[to] = keepArray ? xml[from] : xml[from][0];\n    }\n    if (dest[to] && typeof dest[to]._ === 'string') {\n      dest[to]=dest[to]._;\n    }\n    if (includeSnippet && dest[to] && typeof dest[to] === 'string') {\n      dest[to + 'Snippet'] = utils.getSnippet(dest[to]);\n    }\n  })\n}\n\nutils.maybePromisify = function(callback, promise) {\n  if (!callback) return promise;\n  return promise.then(\n    data => setTimeout(() => callback(null, data)),\n    err => setTimeout(() => callback(err))\n  );\n}\n\nconst DEFAULT_ENCODING = 'utf8';\nconst ENCODING_REGEX = /(encoding|charset)\\s*=\\s*(\\S+)/;\nconst SUPPORTED_ENCODINGS = ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'latin1', 'binary', 'hex'];\nconst ENCODING_ALIASES = {\n  'utf-8': 'utf8',\n  'iso-8859-1': 'latin1',\n}\n\nutils.getEncodingFromContentType = function(contentType) {\n  contentType = contentType || '';\n  let match = contentType.match(ENCODING_REGEX);\n  let encoding = (match || [])[2] || '';\n  encoding = encoding.toLowerCase();\n  encoding = ENCODING_ALIASES[encoding] || encoding;\n  if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {\n    encoding = DEFAULT_ENCODING;\n  }\n  return encoding;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}