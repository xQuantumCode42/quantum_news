{"ast":null,"code":"import Parser from 'rss-parser';\nexport default {\n  data() {\n    return {\n      news: []\n    };\n  },\n  methods: {\n    async fetchNews() {\n      const rssUrl = 'https://news.google.com/rss'; // Replace with your RSS feed URL\n      const encodedRssUrl = encodeURIComponent(rssUrl);\n\n      // Use serverless function in production, public proxy in development\n      const fetchUrl = process.env.NODE_ENV === 'production' ? `/api/rss?url=${encodedRssUrl}` : `https://cors-anywhere.herokuapp.com/${rssUrl}`;\n      try {\n        const response = await fetch(fetchUrl);\n        const xml = await response.text();\n        const parser = new Parser();\n        const feed = await parser.parseString(xml);\n        this.news = feed.items;\n      } catch (error) {\n        console.error('Error fetching news:', error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchNews();\n  }\n};","map":{"version":3,"names":["Parser","data","news","methods","fetchNews","rssUrl","encodedRssUrl","encodeURIComponent","fetchUrl","process","env","NODE_ENV","response","fetch","xml","text","parser","feed","parseString","items","error","console","mounted"],"sources":["/home/bing/Git/quantum_news/quantum-news/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>News Feed</h1>\n    <ul>\n      <li v-for=\"item in news\" :key=\"item.title\">{{ item.title }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport Parser from 'rss-parser';\n\nexport default {\n  data() {\n    return {\n      news: [],\n    };\n  },\n  methods: {\n    async fetchNews() {\n      const rssUrl = 'https://news.google.com/rss'; // Replace with your RSS feed URL\n      const encodedRssUrl = encodeURIComponent(rssUrl);\n\n      // Use serverless function in production, public proxy in development\n      const fetchUrl = process.env.NODE_ENV === 'production'\n        ? `/api/rss?url=${encodedRssUrl}`\n        : `https://cors-anywhere.herokuapp.com/${rssUrl}`;\n\n      try {\n        const response = await fetch(fetchUrl);\n        const xml = await response.text();\n        const parser = new Parser();\n        const feed = await parser.parseString(xml);\n        this.news = feed.items;\n      } catch (error) {\n        console.error('Error fetching news:', error);\n      }\n    },\n  },\n  mounted() {\n    this.fetchNews();\n  },\n};\n</script>"],"mappings":"AAUA,OAAOA,MAAK,MAAO,YAAY;AAE/B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;IACR,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,MAAMC,MAAK,GAAI,6BAA6B,EAAE;MAC9C,MAAMC,aAAY,GAAIC,kBAAkB,CAACF,MAAM,CAAC;;MAEhD;MACA,MAAMG,QAAO,GAAIC,OAAO,CAACC,GAAG,CAACC,QAAO,KAAM,YAAW,GACjD,gBAAgBL,aAAa,EAAC,GAC9B,uCAAuCD,MAAM,EAAE;MAEnD,IAAI;QACF,MAAMO,QAAO,GAAI,MAAMC,KAAK,CAACL,QAAQ,CAAC;QACtC,MAAMM,GAAE,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACjC,MAAMC,MAAK,GAAI,IAAIhB,MAAM,CAAC,CAAC;QAC3B,MAAMiB,IAAG,GAAI,MAAMD,MAAM,CAACE,WAAW,CAACJ,GAAG,CAAC;QAC1C,IAAI,CAACZ,IAAG,GAAIe,IAAI,CAACE,KAAK;MACxB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAAClB,SAAS,CAAC,CAAC;EAClB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}